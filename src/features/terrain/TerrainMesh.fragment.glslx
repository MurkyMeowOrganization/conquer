varying vec2 vUv;

uniform vec2 mapSize; // (map columns, map rows)
uniform vec2 tilesSize; // (tiles columns, tiles rows)

uniform float tileSizeInPixels;

uniform sampler2D map;
uniform sampler2D tiles;

// vec2 random( vec2 pos )
// { 
// 	return clamp( fract(
// 		sin(
// 			vec2(
// 				dot(pos, vec2(12.9898,78.233))
// 			,	dot(pos, vec2(-148.998,-65.233))
// 			)
// 		) * 43758.5453
// 	) - vec2( 0.0 ), vec2( 0.0 ), vec2( 1.0 ) );
// }

// void main() {
//   // // vec2 tilePos = vUv / tilesSize;

//   // float tileIndex = 0.0;
//   // // vec2 tilePos = vec2(mod(tileIndex, tilesSize.x), floor(tileIndex / tilesSize.y));
//   // vec2 tilePos = vec2(0.0, 0.0);

//   // vec2 nUv = (vUv + 1.0) / 2.0;
//   // nUv = tilePos / tilesSize * nUv;
//   // nUv = nUv * 2.0 - 1.0;

//   // vec4 color = texture2D(tiles,  nUv);

//   // // gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);
//   // gl_FragColor = color;

//   vec2 origin_uv = floor(vUv * mapSize);

// 	vec2 origin_tile = clamp(origin_uv, vec2(0.0), vec2(1.0));

// 	vec2 tile_uv = origin_tile / 3.0 + ( fract( vUv * mapSize ) / 3.0 );

//   gl_FragColor = texture2D(tiles, origin_tile);
// }

// How many tiles x and y are there in the blend texture
// Has to be a size that lines up with taTexturesWidth.
// For instance if taTexturesWidth = 16, this could be 64,32,16,8,4,2,1
// Just make sure that the larger one of this and taTexturesWidth loops perfectly
// with chunk size of map. Else you will end up with artifacts
// uniform float blendTextureTiles = 16.0;

// Should we blend
// uniform bool blend = true;

//
// Get the tile the current pixel is in.
// This can be used to fetch the tileID from the mapData texture
//
// returns - The tile position in the current mapData
vec2 getTilePos(vec2 uv) {
  return floor(uv * mapSize);
}

//
// Get our relative pixel position in the current tile
// Should be a number from 0 to tileSizeInPixels-1
// So for a tile size of 64 pixels this a number from 0 to 63
//
// returns - the pixel position within the current tile
vec2 getPixelPosInTile(vec2 uv) {
	float exactPosX = floor(((uv.x * mapSize.x)+1.0) * tileSizeInPixels);
	float exactPosY = floor(((uv.y * mapSize.y)+1.0) * tileSizeInPixels);
	float relativePosX = mod(exactPosX, tileSizeInPixels);
	float relativePosY = mod(exactPosY, tileSizeInPixels);
	return vec2(relativePosX, relativePosY);
}

//
// Get the id of the tile given the current tile positon
// [pos] - result of getTilePos
//
// returns - the ID of the tile from the mapData texture's red channel
float getTileId(vec2 pos) {
	float tileRed = texture2D(map, pos).r;
	return tileRed;
}

//
// Get the pixel
// [pixelPosInTile] - result of getPixelPosInTile
// [tileId] - result of getTileId
// [tile] = result of getTilePos
//
// returns - The coordinate of the pixel to use from the textureAtlas
vec2 getAtlasPixelPos(vec2 pixelPosInTile, float tileId, vec2 tile) {
	// Find out how many tiles are within each texture atlas texture
	float tileRepeat = tilesSize.x;

	// Find the row/column in the texture atlas to use
	// and calculate the pixel position
	float row = mod(tileId, tileRepeat);
	float col = floor(tileId / tileRepeat);
	vec2 textureStartPos = vec2(tileSizeInPixels * col, tileSizeInPixels * row);

	// Mod our current position in the map with how many cells we got in
	// each atlas texutre. Then multiply this by tile size.
	// This gives us the correct part of the mega texture to use.
	float xAdd = mod(tile.x, tileRepeat) * tileSizeInPixels;
	float yAdd = floor(tile.y / tileRepeat) * tileSizeInPixels;
	// textureStartPos += vec2(xAdd, yAdd);
	textureStartPos += vec2(0.0);

	// Add the current position in the tile to where the current atlas
	// tile starts. This will give us the atlas pixel we want.
	return textureStartPos + pixelPosInTile;
}

//
// Get the color of the tile relative to the original tile
// [tile] - result of getTilePos
// [tileId] - result of getTileId
// [pixelPosInTile] - result of getPixelPosInTile
//
// returns - the color for the current pixel based on the tileId
vec4 getColorForCurrentPixel(vec2 tile, float tileId, vec2 pixelPosInTile) {
	vec2 pixelPosAtlas = getAtlasPixelPos(pixelPosInTile, tileId, tile);
	return texture2D(tiles, pixelPosAtlas);
}

void main() {
	// Get our tile position & pixel position in the tile
	// vec2 tile = getTilePos(vUv);
	// vec2 pixelPosInTile = getPixelPosInTile(vUv);

  // Grab the ID of the atlas texture to use and the color for this pixel
  // vec4 colorSelf = getColorForCurrentPixel(tile, tileIdSelf, pixelPosInTile);

  vec2 tileId = floor(vUv * mapSize);

  // float tileIdSelf = texture2D(map, 1.0 / ( vUv * mapSize ) ).r * 255.0;
  // float tileIdSelf = texture2D(map, vec2()).r * 255.0;

  // gl_FragColor = vec4(tileIdSelf, 0.0, 0.0, 1.0);

  vec2 tileSize = 1.0 / tilesSize;

  vec2 start = tileId * tileSize;

  gl_FragColor = texture2D(tiles, start + vUv * tileSize);
}
